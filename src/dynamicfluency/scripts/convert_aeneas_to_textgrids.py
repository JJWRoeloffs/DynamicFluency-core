#!/usr/bin/env python3
from __future__ import annotations

import os
import argparse
from pathlib import Path

from praatio.data_classes.textgrid import Textgrid

from dynamicfluency.aeneas_conversion import aeneas_tier_from_file
from dynamicfluency.helpers import get_local_glob


def parse_arguments() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Processes tokens and phrases .json files generated by aeneas a .TextGrid"
    )
    parser.add_argument(
        "-d",
        "--directory",
        nargs="?",
        default="output",
        help="The directory the tokens and phases is expected in, and the output is saved to",
    )
    args = parser.parse_args()

    if not Path(args.directory).exists():
        parser.error(f"{args.directory} does not exist")

    return args


def main():
    args: argparse.Namespace = parse_arguments()

    word_alignments = get_local_glob(args.directory, glob="*.tokens.json")
    phrase_alignments = get_local_glob(args.directory, glob="*.phrases.json")

    for words, phrases in zip(word_alignments, phrase_alignments):
        words_tier = aeneas_tier_from_file(words, "Words")
        phrases_tier = aeneas_tier_from_file(phrases, "Phrases")

        alignment_grid = Textgrid()
        alignment_grid.addTier(words_tier)
        alignment_grid.addTier(phrases_tier)
        name = str(words).replace(".tokens.json", ".alignment.TextGrid")
        alignment_grid.save(name, format="long_textgrid", includeBlankSpaces=True)

        os.remove(words)
        os.remove(phrases)


if __name__ == "__main__":
    main()
